EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Matrix multiply with overflow.exe -- emu8086 assembler version: 4.08  
 
[ 2020/1/22  --  20:27:36 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       N   EQU     4
[   2]        :                                       M   EQU     7
[   3]        :                                       P   EQU     5
[   4]        :                                       R   EQU     20
[   5]        :                                       
[   6]        :                                       POS EQU     32768
[   7]        :                                       NAT EQU     -32767
[   8]        :                                       
[   9]        :                                       .MODEL  small
[  10]        :                                       
[  11]        :                                       .STACK
[  12]        :                                       
[  13]        :                                       .DATA
[  14]    0100: 03 00 0E 00 F1 FF 09 00 1A 00 CB FF   MATRIX_A    DW      3, 14, -15, 9, 26, -53, 5, 89, 79, 3, 23, 84, -6, 26, 43, -3, 83, 27, -9, 50, 28, -88, 41, 97, -103, 69, 39, -9
                05 00 59 00 4F 00 03 00 17 00 54 00 
                FA FF 1A 00 2B 00 FD FF 53 00 1B 00 
                F7 FF 32 00 1C 00 A8 FF 29 00 61 00 
                99 FF 45 00 27 00 F7 FF             
[  15]    0138: 25 00 9B FF 00 00 3A 00 EC FF 09 00   MATRIX_B    DW      37, -101, 0, 58, -20, 9, 74, 94, -4, 59, -23, 90, -78, 16, -4, 0, -62, 86, 20, 89, 9, 86, 28, 0, -34, 82, 5, 34, -21, 1, 70, -67, 9, 82, 14
                4A 00 5E 00 FC FF 3B 00 E9 FF 5A 00 
                B2 FF 10 00 FC FF 00 00 C2 FF 56 00 
                14 00 59 00 09 00 56 00 1C 00 00 00 
                DE FF 52 00 05 00 22 00 EB FF 01 00 
                46 00 BD FF 09 00 52 00 0E 00       
[  16]    017E: 00 00 00 00 00 00 00 00 00 00 00 00   MATRIX_C    DW      R   DUP(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  17]        :                                       
[  18]    01A6: 00 00                                 POINTER_IA  DW      0
[  19]    01A8: 00 00                                 POINTER_IB  DW      0
[  20]        :                                       
[  21]    01AA: 00 00                                 POINTER_C   DW      0
[  22]        :                                       .CODE
[  23]        :                                       
[  24]    01B0: BA 10 00 8E DA                        .STARTUP
[  25]    01B5: B9 04 00                              MOV CX, N
[  26]        :                                       
[  27]    01B8: 51                                    outloop:    PUSH CX
[  28]    01B9: B9 05 00                              MOV CX, P
[  29]        :                                       
[  30]    01BC: 51                                    midloop:    PUSH CX
[  31]    01BD: B9 07 00                              MOV CX, M
[  32]    01C0: 8B 3E A6 00                           MOV DI, POINTER_IA
[  33]    01C4: 8B 36 A8 00                           MOV SI, POINTER_IB
[  34]    01C8: 83 E3 00                              AND BX, 0
[  35]        :                                       
[  36]    01CB: 83 E2 00                              innloop:    AND DX, 0
[  37]    01CE: 8B 05                                 MOV AX, MATRIX_A[DI]
[  38]    01D0: F7 6C 38                              IMUL MATRIX_B[SI]
[  39]    01D3: 83 FA 00                              CMP DX, 0               ; Check overflow or not
[  40]    01D6: 7F 31                                 JG  ovflg
[  41]    01D8: 7C 39                                 JL  ovfll
[  42]        :                                       
[  43]    01DA: 03 D8                                 con:        ADD BX, AX
[  44]    01DC: 70 2B                                 JO ovflg
[  45]    01DE: 83 C7 02                              ADD DI, 2
[  46]    01E1: 83 C6 0A                              ADD SI, 10
[  47]        :                                       
[  48]    01E4: E2 E5                                 LOOP innloop
[  49]        :                                       
[  50]    01E6: 8B 36 AA 00                           store:      MOV SI, POINTER_C
[  51]    01EA: 89 5C 7E                              MOV MATRIX_C[SI], BX
[  52]    01ED: 83 06 AA 00 02                        ADD POINTER_C, 2
[  53]    01F2: 83 06 A8 00 02                        ADD POINTER_IB, 2
[  54]    01F7: 59                                    POP CX
[  55]    01F8: E2 C2                                 LOOP midloop
[  56]        :                                       
[  57]    01FA: 83 06 A6 00 0E                        ADD POINTER_IA, M*2
[  58]    01FF: 83 26 A8 00 00                        AND POINTER_IB, 0
[  59]    0204: 59                                    POP CX
[  60]    0205: E2 B1                                 LOOP outloop
[  61]        :                                       
[  62]    0207: EB 14                                 JMP over
[  63]        :                                       
[  64]    0209: 83 FB 00                              ovflg:      CMP BX, 0
[  65]    020C: 77 05                                 JA  ovfll
[  66]    020E: BB 00 80                              MOV BX, POS
[  67]    0211: EB D3                                 JMP store
[  68]        :                                       
[  69]    0213: 83 FA FF                              ovfll:      CMP DX, -1
[  70]    0216: 74 C2                                 JE  con
[  71]    0218: BB 01 80                              MOV BX, NAT
[  72]    021B: EB C9                                 JMP store
[  73]        :                                       
[  74]    021D: 90                                    over:       NOP
[  75]        :                                       
[  76]        :                                       
[  77]        :                                       
[  78]    021E: B8 00 4C CD 21                        .EXIT
[  79]        :                                       
[  80]        :                                       END
[  81]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 23      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 2F      -   check sum (l.byte)
0013: 3D      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 1B      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 1B      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
