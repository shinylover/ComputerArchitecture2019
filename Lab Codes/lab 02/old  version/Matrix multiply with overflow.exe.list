EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Matrix multiply with overflow.exe -- emu8086 assembler version: 4.08  
 
[ 2020/1/22  --  18:32:38 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       N EQU 4
[   2]        :                                       M EQU 7
[   3]        :                                       P EQU 5
[   4]        :                                       R EQU 20
[   5]        :                                       
[   6]        :                                       .MODEL small
[   7]        :                                       .STACK
[   8]        :                                       .DATA
[   9]        :                                       
[  10]    0100: 03 00 0E 00 F1 FF 09 00 1A 00 CB FF   ARR_A DW    3, 14, -15, 9, 26, -53, 5, 89, 79, 3, 23, 84, -6, 26, 43, -3, 83, 27, -9, 50, 28, -88, 41, 97, -103, 69, 39, -9
                05 00 59 00 4F 00 03 00 17 00 54 00 
                FA FF 1A 00 2B 00 FD FF 53 00 1B 00 
                F7 FF 32 00 1C 00 A8 FF 29 00 61 00 
                99 FF 45 00 27 00 F7 FF             
[  11]        :                                       
[  12]    0138: 25 00 9B FF 00 00 3A 00 EC FF 09 00   ARR_B DW    37, -101, 0, 58, -20, 9, 74, 94, -4, 59, -23, 90, -78, 16, -4, 0, -62, 86, 20, 89, 9, 86, 28, 0, -34, 82, 5, 34, -21, 1, 70, -67, 9, 82, 14
                4A 00 5E 00 FC FF 3B 00 E9 FF 5A 00 
                B2 FF 10 00 FC FF 00 00 C2 FF 56 00 
                14 00 59 00 09 00 56 00 1C 00 00 00 
                DE FF 52 00 05 00 22 00 EB FF 01 00 
                46 00 BD FF 09 00 52 00 0E 00       
[  13]        :                                       
[  14]    017E: 00 00                                 CHECK DW 0
[  15]        :                                       
[  16]    0180: 00 80                                 Pos_re DW -32768
[  17]    0182: FF 7F                                 Neg_re DW  32767
[  18]        :                                       
[  19]    0184: 00 00                                 point_i DW 0
[  20]    0186: 00 00                                 point_j DW 0
[  21]    0188: 00 00                                 point_i1 DW 0
[  22]    018A: 00 00                                 point_j1 DW 0
[  23]    018C: 00 00                                 point_add_cou DW 0
[  24]        :                                       
[  25]    018E: 00 00 00 00 00 00 00 00 00 00 00 00   ARR_RES DW R  DUP(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  26]        :                                       
[  27]        :                                       .CODE
[  28]    01C0: BA 10 00 8E DA                        .STARTUP
[  29]        :                                       
[  30]    01C5: B9 04 00                              MOV CX, N
[  31]    01C8: BF 00 00                              MOV DI, 0
[  32]        :                                       
[  33]        :                                       
[  34]    01CB:                                       OUTLOOP:
[  35]    01CB: 51                                    PUSH CX
[  36]    01CC: B9 05 00                              MOV CX, P
[  37]        :                                       
[  38]    01CF:                                       MIDLOOP:
[  39]    01CF: 51                                    PUSH CX
[  40]    01D0: B9 07 00                              MOV CX, M
[  41]    01D3: BB 00 00                              MOV BX, 0
[  42]        :                                       
[  43]    01D6: A1 88 00                              MOV AX, point_i1
[  44]    01D9: B2 07                                 MOV DL, M
[  45]    01DB: F6 E2                                 MUL DL
[  46]    01DD: 8B F8                                 MOV DI, AX
[  47]        :                                       
[  48]    01DF:                                       INNERLOOP:
[  49]    01DF: A1 84 00                              MOV AX, point_i
[  50]    01E2: B2 05                                 MOV DL, P
[  51]    01E4: F6 E2                                 MUL DL
[  52]    01E6: 03 06 86 00                           ADD AX, point_j
[  53]    01EA: 8B F0                                 MOV SI, AX
[  54]        :                                       
[  55]    01EC: 8B 05                                 MOV AX, ARR_A[DI]
[  56]    01EE: F7 64 38                              MUL ARR_B[SI]
[  57]    01F1: 03 D8                                 ADD BX, AX
[  58]        :                                       
[  59]    01F3: 70 02                                 JO Lab0
[  60]    01F5: 71 11                                 JNO Return
[  61]    01F7:                                       Lab0:
[  62]    01F7: 83 FB 00                              CMP BX, 0
[  63]    01FA: 76 06                                 JBE Lab2
[  64]    01FC:                                       Lab1:
[  65]    01FC: 8B 1E 82 00                           MOV BX, Neg_re
[  66]    0200: EB 06                                 JMP Return
[  67]    0202:                                       Lab2:
[  68]    0202: 8B 1E 80 00                           MOV BX, Pos_re
[  69]    0206: EB 00                                 JMP Return
[  70]    0208:                                       Return:
[  71]    0208: 47                                    INC DI
[  72]    0209: 47                                    INC DI
[  73]    020A: FF 06 84 00                           INC point_i
[  74]    020E: FF 06 84 00                           INC point_i
[  75]    0212: E2 CB                                 LOOP INNERLOOP
[  76]        :                                       
[  77]    0214: 59                                    POP CX
[  78]    0215: 8B 36 8C 00                           MOV SI, point_add_cou
[  79]    0219: 89 9C 8E 00                           MOV ARR_RES[SI], BX
[  80]    021D: FF 06 8C 00                           INC point_add_cou
[  81]    0221: FF 06 8C 00                           INC point_add_cou
[  82]    0225: FF 06 86 00                           INC point_j
[  83]    0229: FF 06 86 00                           INC point_j
[  84]    022D: B8 00 00                              MOV AX, 0
[  85]    0230: A3 84 00                              MOV point_i, AX
[  86]    0233: E2 9A                                 LOOP MIDLOOP
[  87]        :                                       
[  88]        :                                       
[  89]    0235: 59                                    POP CX
[  90]    0236: B8 00 00                              MOV AX, 0
[  91]    0239: A3 86 00                              MOV point_j, AX
[  92]    023C: FF 06 88 00                           INC point_i1
[  93]    0240: FF 06 88 00                           INC point_i1
[  94]    0244: E2 85                                 LOOP OUTLOOP
[  95]        :                                       
[  96]        :                                       
[  97]        :                                       
[  98]    0246: B8 00 4C CD 21                        .EXIT
[  99]        :                                       END
[ 100]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 4B      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: B6      -   check sum (l.byte)
0013: 61      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 1C      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 1C      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
